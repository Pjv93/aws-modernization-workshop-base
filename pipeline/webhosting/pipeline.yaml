#!/bin/bash

echo "Please ensure you have set up the temporary credentials from the apn-modern-workshop-group Isengard account in your command terminal."

cd aws-modernization-with-snyk-sentinelone/pipeline/webhosting/
# Prompt the user to verify they are in the correct directory
echo "Ensure you are in the correct directory within the new repository where the CloudFormation templates are located."
read -p "Press Enter to continue if you are in the correct directory, or Ctrl+C to abort and navigate to the correct directory..."

# Automatically set the AWS region
export AWS_REGION=us-west-2
echo "AWS region set to $AWS_REGION."

# Step 1: Get the workshop hostname and inform about the URL naming
echo "The name you enter for the workshop hostname will form the URL of the workshop."
echo "For example, entering 'my-workshop' will create the URL 'my-workshop.awsworkshop.io'."
read -p "Enter your workshop hostname (1-20 characters, no uppercase): " workshop_hostname

# Validate hostname length and character set
if [[ ! "$workshop_hostname" =~ ^[a-z0-9-]{1,20}$ ]] || [[ "$workshop_hostname" =~ ^-.* ]] || [[ "$workshop_hostname" =~ .*$- ]]; then
    echo "Hostname must be 1-20 lowercase alphanumeric characters, may contain hyphens but not start or end with them."
    exit 1
fi

# Replace the WorkshopHostname in the cloudfront-s3-website.yaml file
sed -i '' "s/xxxxxxxx/$workshop_hostname/g" cloudfront-s3-website.yaml || { echo "Error updating cloudfront-s3-website.yaml."; exit 1; }

# Set the stack name for CloudFront and S3 based on the workshop hostname
cloudfront_stack_name="${workshop_hostname}-Workshop"

echo "Creating CloudFront and S3 stack with name $cloudfront_stack_name..."
if ! aws cloudformation create-stack --stack-name "$cloudfront_stack_name" --template-body file://cloudfront-s3-website.yaml --enable-termination-protection; then
    echo "Error creating CloudFront and S3 stack."
    exit 1
fi

# Check the status of the CloudFormation stack until it is complete or has failed
echo "Checking the status of the stack. This may take a few minutes..."
while :; do
    stack_status=$(aws cloudformation describe-stacks --stack-name "$cloudfront_stack_name" --query "Stacks[0].StackStatus" --output text)
    if [[ $stack_status == "CREATE_COMPLETE" ]]; then
        echo "Stack $cloudfront_stack_name has been created successfully."
        break
    elif [[ $stack_status == "CREATE_FAILED" ]]; then
        echo "Stack creation failed for $cloudfront_stack_name."
        exit 1
    else
        echo "Current status of $cloudfront_stack_name: $stack_status"
        sleep 30
    fi
done

# Step 2: Retrieve the CloudFront Distribution ID
echo "Retrieving CloudFront Distribution ID..."
distribution_id=$(aws cloudformation describe-stacks --stack-name "$cloudfront_stack_name" --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistroId'].OutputValue" --output text) || { echo "Error retrieving CloudFront Distribution ID."; exit 1; }

echo "CloudFront Distribution ID: $distribution_id"

# Step 3: Modify pipeline.yaml and create the CodePipeline stack
# Update the pipeline.yaml file with the necessary parameters
sed -i '' "s/xxxxxxxx/$workshop_hostname/g" pipeline.yaml || { echo "Error updating pipeline.yaml."; exit 1; }
sed -i '' "s/xxxxxxxx.awsworkshop.io/$workshop_hostname.awsworkshop.io/g" pipeline.yaml || { echo "Error updating pipeline.yaml."; exit 1; }
sed -i '' "s/xxx/$distribution_id/g" pipeline.yaml || { echo "Error updating pipeline.yaml."; exit 1; }
sed -i '' "s/aws-modernization-with-$/aws-modernization-with-$workshop_hostname/g" pipeline.yaml || { echo "Error updating pipeline.yaml."; exit 1; }
sed -i '' "s|https://github.com/aws-samples/aws-modernization-with-|https://github.com/aws-samples/aws-modernization-with-$workshop_hostname.git|g" pipeline.yaml || { echo "Error updating pipeline.yaml."; exit 1; }

# Set the stack name for the pipeline based on the workshop hostname
pipeline_stack_name="${workshop_hostname}-Pipeline"

echo "Creating CodePipeline stack with name $pipeline_stack_name..."
if ! aws cloudformation create-stack --stack-name "$pipeline_stack_name" --template-body file://pipeline.yaml --capabilities CAPABILITY_NAMED_IAM --enable-termination-protection; then
    echo "Error creating CodePipeline stack."
    exit 1
fi

# Check the status of the CloudFormation stack until it is complete or has failed
echo "Checking the status of the stack. This can take up to 20 minutes for the website to become available..."
while :; do
    stack_status=$(aws cloudformation describe-stacks --stack-name "$pipeline_stack_name" --query "Stacks[0].StackStatus" --output text)
    if [[ $stack_status == "CREATE_COMPLETE" ]]; then
        echo "Stack $pipeline_stack_name has been created successfully."
        break
    elif [[ $stack_status == "CREATE_FAILED" ]]; then
        echo "Stack creation failed for $pipeline_stack_name."
        exit 1
    else
        echo "Current status of $pipeline_stack_name: $stack_status"
        sleep 30
    fi
done

echo "Setup complete. Check the CloudFront distribution full domain in the AWS Management Console."
