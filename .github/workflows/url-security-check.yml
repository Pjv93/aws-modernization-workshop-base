name: URL Security Check

on:
  pull_request:
  push:
    branches: [ main, master ]
  schedule:
    # Run monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  url-security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check URLs for inappropriate content
      run: |
        python3 << 'EOF'
        import re, subprocess, sys, requests, os

        def extract_urls_from_diff():
            try:
                result = subprocess.run(['git', 'diff', 'HEAD~1', 'HEAD'], capture_output=True, text=True)
                urls = []
                for line in result.stdout.split('\n'):
                    if line.startswith('+') and not line.startswith('+++'):
                        urls.extend(re.findall(r'https?://[^\s<>"\'`]+', line))
                return list(set(urls))
            except: return []

        def find_all_urls():
            urls = []
            for root, dirs, files in os.walk('.'):
                for file in files:
                    if file.endswith(('.md', '.txt', '.html', '.yml', '.yaml')):
                        try:
                            with open(os.path.join(root, file), 'r') as f:
                                content = f.read()
                                urls.extend(re.findall(r'https?://[^\s<>"\'`]+', content))
                        except: pass
            return list(set(urls))

        def check_url_content(url):
            try:
                response = requests.get(url, headers={'User-Agent': 'SecurityBot/1.0'}, timeout=10, allow_redirects=True)
                content = (response.url + response.text).lower()[:5000]
                
                # Broad keywords (any occurrence)
                broad_indicators = ['porn', 'xxx', 'sex', 'nude', 'erotic', 'nsfw', '18+', 'explicit', 'hardcore', 'webcam', 'escort', 'fetish']
                
                # Contextual adult patterns (more specific)
                adult_patterns = ['adult content', 'adult site', 'adult entertainment', 'adult videos', 'adult material', 'adult webcam']
                
                # Check broad indicators
                for indicator in broad_indicators:
                    if indicator in content:
                        return True, indicator
                
                # Check contextual adult patterns
                for pattern in adult_patterns:
                    if pattern in content:
                        return True, pattern
                        
                return False, None
            except: return False, None

        # Determine scan type based on trigger
        if os.getenv('GITHUB_EVENT_NAME') == 'schedule':
            # Monthly full scan
            urls = find_all_urls()
            scan_type = "Monthly full repository scan"
        else:
            # Commit-based scan
            urls = extract_urls_from_diff()
            scan_type = "Commit diff scan"
        
        if not urls:
            print(f"‚úÖ {scan_type}: No URLs found")
            sys.exit(0)
        
        print(f"üîç {scan_type}: Checking {len(urls)} URLs...")
        blocked = []
        
        for url in urls:
            print(f"Checking: {url}")
            is_adult, reason = check_url_content(url)
            if is_adult:
                blocked.append(f"{url} - {reason}")
                print(f"‚ùå BLOCKED: {url} - {reason}")
            else:
                print(f"‚úÖ Clean: {url}")
        
        if blocked:
            if os.getenv('GITHUB_EVENT_NAME') == 'schedule':
                print(f"\nüö® SECURITY ALERT: {len(blocked)} compromised URLs found in repository!")
            else:
                print(f"\n‚ùå SECURITY CHECK FAILED: Inappropriate content detected!")
            for url in blocked:
                print(f"  - {url}")
            sys.exit(1)
        else:
            print(f"\n‚úÖ All URLs passed security check")
            sys.exit(0)
        EOF
    
    - name: Notify Slack on Security Failure
      if: failure()
      run: |
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
        -H "Content-Type: application/json" \
        --data '{
          "Content": "üö® *URL Security Alert* üö®\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\n\nInappropriate URLs detected! Check the action logs for details.\n\nAction: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }'
